1、 java三种技术框架
	Java SE 标准版
	Java EE 企业版
	Java ME 移动版

2、Java特点：
	安全性
	免费开放
	面向对象
	跨平台性
	
3、跨平台的原因
	Java程序运行在JVM上，系统有JVM即可运行Java程序
	
4、
	JVM为java编译器
	JRE是java核心类库和JVM
	JDK为开发工具+ JRE
	
5、关键字
	class 类                                interface   接口                                                  byte    字节                                  short    短整型
	int   整型                             long      长整型                                                   float  浮点型                                double   双浮点
	char  字符                             Boolean   布尔型                                                  void    空类型
	
	true  真                                false       假                                                     null     空                      
	
	if   如果                               else       否则                                                   switch   选择                                  case
	while    循环           
	
6、标识符
	命名规则：
		1、可由大小写字母、数字、下划线（_）、美元符号（$）组成
		2、数字不能开头
		3、关键字不能使用
		4、严格区分大小写
		
7、注释
	单行注释  //
	多行注释  /**/
	文件注释  /**         */   可通过Javadoc导出注释
	
8、静态方法
	静态方法，不能访问非静态方法与非静态变量
	非静态方法可以访问静态方法，也可以访问非静态方法
	静态方法中不能出现this和super关键字
	
9、静态成员变量
	是被所有对象共享，一旦被修改，对其他对象都有影响
	访问方式：
		类名.静态变量名
		对象名.静态方法名
		
		静态成员随类加载而加载，类消失而消失，生命周期长
		
		如果变量值为共享数据建议static修饰
		
10、单例设计模式
	目的：保证对象在内存的唯一性
	私有化构造函数
	在本类创建唯一实体
	提供公共访问，返回本类实例对象
	
11、代码块
	一对大括号，定义在类中
	{
		多行代码;
	}
	
	静态代码块
	static{
		
	}
	用于给类进行初始化，只执行一次
	加载顺序：1、先进行默认初始化
			2、进行显示初始化
			3、执行静态代码块
			
	构造代码块
	{
	
	}
	优先于构造方法执行，用于给所有对象进行统一初始化
	在构造方法中有隐式三步：1、执行super
					  2、显示初始化
					  3、构造代码块

9、继承
	子类 extends 父类
	7
	注意：不能为了代码复用性而乱用代码，必须有所属关系才能使用继承
	特点：单继承
		一个子类只能有一个父类
		一个父类可以有多个子类 
		
		
		
10、接口和抽象类区别
	从声明上
		抽象类是一个类，使用class声明；还需要使用abstract关键字修饰
		接口不是一个类，使用interface声明
	从能书写的成员上看
		抽象类是一个类，可以书写类中可以书写的成员和抽象函数
		接口只能书写成员变量和抽象函数，而且修饰符固定
	从有无构造方法看
		抽象类必须有构造方法
		接口没有构造方法
		
	从作用上看
		抽象类是父类，用来描述所有子类的共性信息的，只是描述的有些功能不是具体的（抽象的）
		接口是用来描述不属于继承体系的拓展功能的；还可以定义规则
	继承关系上
		抽象类和类之间是继承关系
		接口和类是实现关系，只支持单继承和多重继承
		接口和类之间是是实现关系，一个实现类可以实现多个接口
		接口和接口之间是继承，可以实现多继承和多重继承
		
11、封装的好处
	提高代码复用性
	提高代码安全性
	提高代码易用性